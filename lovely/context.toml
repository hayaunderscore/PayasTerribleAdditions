[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# context.payasaka_dos_before
# Runs before payasaka_before
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "-- context.before calculations"
position = 'before'
payload = '''
local should_return = PTASaka.dos_cardarea.disabled
PTASaka.dos_cardarea.disabled = true
SMODS.calculate_context({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, payasaka_dos_before = true})
'''
match_indent = true
times = 1

# Return cardarea state & Wild Two revert
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "-- TARGET: effects after hand evaluation"
position = 'after'
payload = '''
PTASaka.dos_cardarea.disabled = should_return
G.E_MANAGER:add_event(Event({
	func = function()
		for k, card in ipairs(G.play.cards) do
			if card.payasaka_wild_two then
				card:flip()
				--if card.children.front then
				--	card.children.front = nil
				--end
			end
		end
		return true
	end
}))
'''
match_indent = true
times = 1

# context.payasaka_before
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "-- context.before calculations"
position = 'before'
payload = '''
SMODS.calculate_context({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, payasaka_before = true})
text, disp_text, poker_hands = G.FUNCS.get_poker_hand_info(G.play.cards)
SMODS.displayed_hand = text
'''
match_indent = true
times = 1

# Allow dynamic changing of hand chips and mult before scoring
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "-- TARGET: effects before scoring starts"
position = 'before'
payload = '''
text,disp_text,poker_hands,_,__ = G.FUNCS.get_poker_hand_info(G.play.cards)
'''
match_indent = true
times = 1

# Add fnnuy card area to calculate contexts
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = "-- TARGET: add your own CardAreas for joker evaluation"
position = "after"
payload = '''
t[#t+1] = PTASaka.dos_cardarea
'''
match_indent = true
times = 1

# Change order of playing cards v. jokers when idk is present
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "for _, v in ipairs(SMODS.get_card_areas('playing_cards')) do"
position = "at"
payload = '''
local idk_present = next(SMODS.find_card('j_payasaka_idk'))
for _, v in ipairs(idk_present and {} or SMODS.get_card_areas('playing_cards')) do
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "-- context.final_scoring_step calculations"
position = "before"
payload = '''
for _, v in ipairs(idk_present and SMODS.get_card_areas('playing_cards') or {}) do
	SMODS.calculate_main_scoring({cardarea = v, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands}, v == G.play and scoring_hand or nil)
    delay(0.3)
end
'''
match_indent = true
times = 1

# Don't show debuff shader until its time
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = "self.children.center:draw_shader('debuff', nil, self.ARGS.send_to_shader)"
position = "at"
payload = '''
if not self.pta_no_show_debuff then self.children.center:draw_shader('debuff', nil, self.ARGS.send_to_shader) end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = "self.children.front:draw_shader('debuff', nil, self.ARGS.send_to_shader)"
position = "at"
payload = '''
if not self.pta_no_show_debuff then self.children.front:draw_shader('debuff', nil, self.ARGS.send_to_shader) end
'''
match_indent = true
times = 1

# Remove retriggers if Aww! No Retriggers is present
# ALL of them
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = "if _type == 'joker_retrigger' then"
position = "before"
payload = '''
if PTASaka.stop_you_are_violating_the_law then 
	effect = { fake_repetitions = eval.repetitions or 1 }
	if _type == 'joker_retrigger' then
            effect.retrigger_card = effect_card
            effect.message_card = effect.message_card or effect_card
            effect.retrigger_flag = true
        elseif _type == 'individual_retrigger' then
            effect.retrigger_card = effect_card.object
            effect.message_card = effect.message_card or effect_card.scored_card
        elseif not _type then
            effect.card = effect.card or effect_card
        end
	eval.repetitions = 0
	SMODS.calculate_effect(effect, effect.retrigger_card or effect.card)
	return 
end
'''
match_indent = true
times = 1

# Custom context for drawing additional cards lmao
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "for i=1, hand_space do --draw cards from deckL"
position = "before"
payload = '''
local add = {}
SMODS.calculate_context({payasaka_draw_to_deck = true}, add)
SMODS.trigger_effects(add)
for k, v in ipairs(add) do
	for _k, _v in pairs(v) do
		hand_space = math.min(hand_space + (_v.draw_amount or 0), #G.deck.cards)
	end
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''draw_card(G.play,G.discard, it*100/play_count,'down', false, v)'''
position = 'at'
payload = '''
if not G.GAME.payasaka_prelude then
	local add = {}
	SMODS.calculate_context({payasaka_play_to_discard = true, other_card = v}, add)
	SMODS.trigger_effects(add)
	local target = G.discard
	for k, v in ipairs(add) do
		for _k, _v in pairs(v) do
			target = _v.target or target
		end
	end
	draw_card(G.play,target, it*100/play_count,'down', false, v)
else
	draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.E_MANAGER:add_event(Event({
          trigger = 'immediate',
          func = function()
            ease_round(1)'''
position = 'before'
payload = '''
G.GAME.payasaka_blind_override = e.config.ref_table
G.E_MANAGER:add_event(Event({
	trigger = 'immediate',
	func = function()
		local add = {}
		SMODS.calculate_context({payasaka_pre_setting_blind = true, blind = G.GAME.payasaka_blind_override}, add)
		SMODS.trigger_effects(add)
		for k, v in ipairs(add) do
			for _k, _v in pairs(v) do
				G.GAME.payasaka_blind_override = G.P_BLINDS[_v.override] or G.GAME.payasaka_blind_override
			end
		end
		return true
	end
}))
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.GAME.round_resets.blind = e.config.ref_table'''
position = 'at'
payload = '''
G.GAME.round_resets.blind = G.GAME.payasaka_blind_override
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''if G.GAME.round_resets.blind_states.Boss == 'Defeated' then '''
position = 'before'
payload = '''
local add = {}
SMODS.calculate_context({payasaka_cash_out = true}, add)
SMODS.trigger_effects(add)
'''
match_indent = true

# Add custom context to individual debuffed cards
# I don't want to make other mods that add this trigger them twice...
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''else
            if scoring_hand then
                if in_scoring then context.cardarea = G.play else context.cardarea = 'unscored' end
            end
            SMODS.score_card(card, context)
        end'''
position = "after"
payload = '''
if card.debuff then
	if scoring_hand then
		if in_scoring then context.cardarea = G.play else context.cardarea = 'unscored' end
	end

	local effects = {}
	SMODS.calculate_context({payasaka_debuff_individual = true, card = card, cardarea = context.cardarea}, effects)

	local flags = SMODS.trigger_effects(effects, card)
end
'''
match_indent = true
times = 1

# Always keep track of added food jokers
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''SMODS.calculate_context({card_added = true, card = self})'''
position = "after"
payload = '''
G.GAME.found_food_jokers = G.GAME.found_food_jokers or {}
G.GAME.found_food_joker_count = G.GAME.found_food_joker_count or 0
if PTASaka.food_jokers[self.config.center_key] and not G.GAME.found_food_jokers[self.config.center_key] then
	G.GAME.found_food_jokers[self.config.center_key] = true
	G.GAME.found_food_joker_count = G.GAME.found_food_joker_count + 1
end
'''
match_indent = true

# Handle tired jokers
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''for i=1, hand_space do --draw cards from deckL'''
position = 'before'
payload = '''
for _, area in pairs(SMODS.get_card_areas('jokers', nil)) do
	for _, card in pairs(area.cards) do
		if card.ability.payasaka_tired then
			SMODS.debuff_card(card, G.GAME.current_round.hands_played < 1, "payasaka_tired")
		end
	end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''-- context.end_of_round calculations'''
position = 'after'
payload = '''
for _, area in pairs(SMODS.get_card_areas('jokers', "end_of_round")) do
	for _, card in pairs(area.cards) do
		if card.ability.payasaka_tired then
			SMODS.debuff_card(card, G.GAME.current_round.hands_played < 1, "payasaka_tired")
		end
	end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''SMODS.calculate_context({using_consumeable = true, consumeable = card, area = card.from_area})'''
position = 'before'
payload = '''
if card.ability.eternal then dont_dissolve = true; area = G.consumeables; draw_card(G.play, area, 1, 'up', true, card, nil, mute); end
'''
match_indent = true