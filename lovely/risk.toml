[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Save risk card stuff to here
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''G.culled_table =  recursive_table_cull{'''
position = 'before'
payload = '''
local risks = {}
if G.GAME.payasaka_risk_objects then
	for k, v in ipairs(G.GAME.payasaka_risk_objects) do
		if v and (type(v) == "table") and v.is and v:is(PTASaka.RiskObject) then
			local ret = v:save()
			if ret then risks[k] = ret end
		end
	end
end

'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''GAME = G.GAME,'''
position = 'before'
payload = '''
pta_risks = risks,
'''
match_indent = true

# Load them back in!!!!
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''G.GAME.blind:load(saveTable.BLIND)'''
position = 'after'
payload = '''
G.GAME.payasaka_risk_objects = {}
local risks = saveTable.pta_risks or {}
for k, v in ipairs(risks) do
	local risk = PTASaka.RiskObject(nil)
	risk:load(v)
	G.GAME.payasaka_risk_objects[k] = risk
end
'''
match_indent = true

# Add this to individual checks for SMODS
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''-- TARGET: add your own individual scoring targets'''
position = 'after'
payload = '''
for k, v in pairs(G.GAME.payasaka_risk_objects or {}) do
	if (type(v) == "table") and v and v.is and v:is(PTASaka.RiskObject) then
		t[#t+1] = { object = v, scored_card = G.GAME.blind.children.animatedSprite }
	end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''-- TARGET: setting_blind effects'''
position = 'before'
payload = '''
if G.GAME.risk_cards_risks and G.GAME.blind_on_deck == 'Boss' then
	for k, v in ipairs(G.GAME.risk_cards_risks) do
		G.P_CENTERS[v.key].apply_risk(G.P_CENTERS[v.key], v.ability)
		G.GAME.payasaka_risk_objects[#G.GAME.payasaka_risk_objects+1] = PTASaka.RiskObject(v.key)
	end
end
for k, v in pairs(G.GAME.payasaka_risk_objects) do
	v:calculate({setting_blind = true, blind = G.GAME.round_resets.blind})
end

'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''-- TARGET: main end_of_round evaluation'''
position = 'before'
payload = '''
if G.GAME.risk_cards_risks and G.GAME.blind_on_deck == 'Boss' and not game_over then
	for k_, v in ipairs(G.GAME.risk_cards_risks) do
		G.P_CENTERS[v.key].apply_reward(G.P_CENTERS[v.key], v.ability)
		if G.P_CENTERS[v.key].tier > 0 then
			add_tag(Tag('tag_payasaka_tier'..G.P_CENTERS[v.key].tier..'reward'))
		end
	end
    G.GAME.risk_cards_risks = {}
end
if G.GAME.payasaka_risk_objects and G.GAME.blind_on_deck == 'Boss' and not game_over then
	local persist = {}
	for k_, v in pairs(G.GAME.payasaka_risk_objects) do
		if v and not v.ability.persist then
			v:remove()
		elseif v and v.ability.persist then
			persist[#persist+1] = v
			G.GAME.risk_cards_risks[#G.GAME.risk_cards_risks+1] = {
				key = v.center.key,
				ability = PTASaka.deep_copy(v.ability.extra)
			}
		end
	end
	G.GAME.payasaka_risk_objects = persist
end
'''
match_indent = true

# Elusive
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''draw_card(G.deck,G.hand, i*100/hand_space,'up', true)'''
position = 'at'
payload = '''
draw_card(G.deck,G.hand, i*100/hand_space,'up', true, nil, nil, nil, i <= (G.GAME.payasaka_elusive_cards or 0))
'''
match_indent = true

# This is a very stupid patch.
# I shouldn't need to do this but doing this some other way requires me to tinker more and ionlikedat
# Thunk pls fix
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''local stay_flipped = G.GAME and G.GAME.blind and G.GAME.blind:stay_flipped(self, card, area)'''
position = 'at'
payload = '''
stay_flipped = stay_flipped or (G.GAME and G.GAME.blind and G.GAME.blind:stay_flipped(self, card, area))
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "          G.GAME.stake > 1 and {"
position = "before"
payload = '''
{
	label = G.GAME.risk_cards_risks and #G.GAME.risk_cards_risks > 0 and localize('b_risk_cards') or nil, 
	tab_definition_function = G.GAME.risk_cards_risks and #G.GAME.risk_cards_risks > 0 and G.UIDEF.current_risks or nil,
},'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
if card.ability.set == 'Booster' then
      G.CONTROLLER.locks.use = false
      G.TAROT_INTERRUPT = nil
'''
position = "at"
payload = '''
if card.ability.set == 'Booster' or (card.config.center.fake_booster and not select_to) then
      G.CONTROLLER.locks.use = false
      G.TAROT_INTERRUPT = nil
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
local select_to = card.area == G.pack_cards and booster_obj and booster_obj.select_card and card:selectable_from_pack(booster_obj)
'''
position = "after"
payload = '''
if card.config.center.pta_selectable and card.area == G.pack_cards then select_to = "consumeables" end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''draw_card(G.play,G.discard, it*100/play_count,'down', false, v)'''
position = 'at'
payload = '''
if G.GAME.payasaka_prelude then
	draw_card(G.play,G.deck, it*100/play_count,'down', false, v)
	G.deck:shuffle('prelude_shuf'..G.GAME.round_resets.ante)
else
	draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])'''
position = 'at'
payload = '''
if G.GAME.payasaka_perpetuate_active then
	draw_card(G.hand, G.deck, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])
	G.deck:shuffle('perpetuate_shuf'..G.GAME.round_resets.ante)
else
	draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])
end
'''
match_indent = true
