[manifest]
version = "1.0.0"
dump_lua = true
priority = -1000

# Scale number differently
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''e.config.object.scale = scale_number(G.GAME.current_round.current_hand.mult, 0.9, 1000)'''
position = 'after'
payload = '''
local scale = (Yggdrasil and 16 or 6) - (PTASaka.payasaka_text_size or 0)
if string.len(new_mult_text) > scale then
	e.config.object.scale = e.config.object.scale / (string.len(new_mult_text)/scale)
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''e.config.object.scale = scale_number(G.GAME.current_round.current_hand.chips, 0.9, 1000)'''
position = 'after'
payload = '''
local scale = (Yggdrasil and 16 or 6) - (PTASaka.payasaka_text_size or 0)
if string.len(new_chip_text) > scale then
	e.config.object.scale = e.config.object.scale / (string.len(new_chip_text)/scale)
end
'''
match_indent = true
times = 1

# Entropy bandaid fix
[[patches]]
[patches.pattern]
target = '''=[SMODS entr "lib/fixes.lua"]'''
pattern = '''if string.len(new_mult_text) > 6 then
          e.config.object.scale = 0.9 / (string.len(new_mult_text)/6)
        end'''
position = 'at'
payload = '''
local scale = (Yggdrasil and 16 or 6) - (PTASaka.payasaka_text_size or 0)
if string.len(new_mult_text) > scale then
	e.config.object.scale = e.config.object.scale / (string.len(new_mult_text)/scale)
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''=[SMODS entr "lib/fixes.lua"]'''
pattern = '''if string.len(new_chip_text) > 6 then
      e.config.object.scale = 0.9 / (string.len(new_chip_text)/6)
    end'''
position = 'at'
payload = '''
local scale = (Yggdrasil and 12 or 6) - (PTASaka.payasaka_text_size or 0)
if string.len(new_chip_text) > scale then
	e.config.object.scale = e.config.object.scale / (string.len(new_chip_text)/scale)
end
'''
match_indent = true
times = 1

# Allow changing X to ^ via an ID
# Also changes it into a DynaText for juice up shenanigans
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''return {n=G.UIT.ROOT, config = {align = "cm", padding = 0.03, colour = G.C.UI.TRANSPARENT_DARK}, nodes={'''
position = 'before'
payload = '''
local realhand = Yggdrasil and contents.hand.nodes[1] or contents.hand
local sc = (Yggdrasil and contents.hand.nodes[1] or contents.hand).nodes[1].nodes[2].nodes[2].nodes[1].config.scale
local exis = DynaText{string = {"X"}, pop_in_rate = 9999999, silent = true, scale = sc, colours = {G.C.UI_MULT}, shadow = true}
realhand.nodes[1].nodes[2].nodes[2].nodes[1] = {n=G.UIT.O, config={object = exis, id = 'chips_what_mult'}}
'''
match_indent = true
times = 1

# Jesus christ.... okay
# First, set final hand chips * mult to hand chips ^ mult if we need to
# Do this... atleast 10 times. Cryptid exists.
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''math\.floor\(hand_chips\*mult\)'''
position = 'at'
payload = '''math.floor(PTASaka.arrow(G.GAME.payasaka_exponential_count,hand_chips,mult))'''
match_indent = true
times = 10

# Flames should also be accounted for...
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''G.ARGS.score_intensity.earned_score = G.GAME.current_round.current_hand.chips*G.GAME.current_round.current_hand.mult'''
position = 'at'
payload = '''G.ARGS.score_intensity.earned_score = PTASaka.arrow(G.GAME.payasaka_exponential_count,G.GAME.current_round.current_hand.chips,G.GAME.current_round.current_hand.mult)'''
match_indent = true
times = 1
