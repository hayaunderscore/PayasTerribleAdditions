[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Add an exception for Snapgraph
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = "elseif card.ability.set == 'Joker' then "
position = 'before'
payload = '''
elseif card.config.center.pta_usable and card.from_area ~= G.shop and card.from_area ~= G.pack_cards then 
	draw_card(G.hand, G.play, 1, 'up', true, card, nil, mute)
	dont_dissolve = true
    delay(0.2)
    PTASaka.use_joker(card, area)
    SMODS.calculate_context({using_consumeable = true, consumeable = card, area = card.from_area})
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''(G.GAME.used_vouchers["v_directors_cut"] and not G.GAME.round_resets.boss_rerolled)) then'''
position = 'at'
payload = '''
(G.GAME.used_vouchers["v_directors_cut"] and not G.GAME.round_resets.boss_rerolled)) and not G.GAME.payasaka_cannot_reroll then
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''-- TARGET: main end_of_round evaluation'''
position = 'before'
payload = '''
if G.GAME.blind_on_deck == 'Boss' and not game_over and G.GAME.payasaka_fucking_hell then
	if #G.consumeables.cards < G.consumeables.config.card_limit then
		local _c = SMODS.add_card { key = 'c_payasaka_gacha', area = G.consumeables }
		_c:juice_up()
	end
end
'''
match_indent = true
times = 1

# Add ahead info_queue if applicable
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/game_object.lua"]'''
pattern = '''desc_nodes.background_colour = res.background_colour'''
position = 'before'
payload = '''
if card and card.is_ahead and card:is_ahead() then
	info_queue[#info_queue+1] = PTASaka.DescriptionDummies["dd_payasaka_ahead"]
end
'''
match_indent = true

# Add ahead info_queue if applicable
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if first_pass and not (_c.set == 'Edition') and badges then'''
position = 'before'
payload = '''
if card and card.config and card.config.center and (not card.config.center.mod) and card.is_ahead and card:is_ahead() and _c.set ~= "Booster" then
	info_queue[#info_queue+1] = PTASaka.DescriptionDummies["dd_payasaka_ahead"]
end
'''
match_indent = true

# Risk card spawning (unaffected by showman)
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''G.GAME.spectral_rate = G.GAME.spectral_rate or 0'''
position = 'before'
payload = '''
if G.GAME.payasaka_only_risk and area == G.shop_jokers then
	local risk_card = SMODS.create_card { set = "Risk", area = area }
	create_shop_card_ui(risk_card, 'Risk', area)
	return risk_card
end
'''
match_indent = true

# Oh fuck
[[patches]]
[patches.pattern]
target = 'main.lua'
pattern = '''if (love.system.getOS() == 'OS X' ) and (jit.arch == 'arm64' or jit.arch == 'arm') then jit.off() end'''
position = 'before'
payload = '''
-- I am injecting at the very start baybee
pta_amount_of_lua_files_loaded_please_dont_override = 0
local old_require = require
function require(f, ...)
	-- we dont need to load it again, capisce?
	if not package.loaded[f] then
		pta_amount_of_lua_files_loaded_please_dont_override = pta_amount_of_lua_files_loaded_please_dont_override + 1
	end
	return old_require(f, ...)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/loader.lua"]'''
pattern = '''if not chunk then return nil, "Error processing file '" .. path .. "' for mod with ID '" .. mod.id .. "': " .. err end'''
position = 'after'
payload = '''
pta_amount_of_lua_files_loaded_please_dont_override = pta_amount_of_lua_files_loaded_please_dont_override + 1
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''local sell = nil'''
position = 'before'
payload = '''
if (G.payasaka_gacha_pack_extra and (card.area == G.pack_cards or card.area == G.payasaka_gacha_pack_extra)) then
        if G.STATE == G.STATES.SMODS_BOOSTER_OPENED and (SMODS.OPENED_BOOSTER and SMODS.OPENED_BOOSTER.config.center.kind == 'Gacha') then
            return {
                n=G.UIT.ROOT, config = {padding = 0, colour = G.C.CLEAR}, nodes={
                  {n=G.UIT.R, config={ref_table = card, r = 0.08, padding = 0.1, align = "bm", minw = 0.5*card.T.w - 0.15, maxw = 0.9*card.T.w - 0.15, minh = 0.3*card.T.h, hover = true, shadow = true, colour = G.C.UI.BACKGROUND_INACTIVE, one_press = true, button = 'use_card', func = 'can_select_from_gacha'}, nodes={
                    {n=G.UIT.T, config={text = localize('b_select'),colour = G.C.UI.TEXT_LIGHT, scale = 0.45, shadow = true}}
                  }},
              }}
        end
    end
'''
match_indent = true

# Patch Nopeus to remove stupid ahh crash
[[patches]]
[patches.pattern]
target = '''=[SMODS nopeus "Nopeus.lua"]'''
pattern = '''G.pack_cards:remove()'''
position = 'at'
payload = '''
if G.pack_cards then G.pack_cards:remove() end
'''
match_indent = true

# Why are you crashing.
[[patches]]
[patches.pattern]
target = '''cardarea.lua'''
pattern = '''function CardArea:align_cards()'''
position = 'after'
payload = '''
if not self.cards then self.cards = {} end
if not self.children then self.children = {} end
'''
match_indent = true

# Why are you crashing.
[[patches]]
[patches.pattern]
target = '''cardarea.lua'''
pattern = '''function CardArea:draw()'''
position = 'after'
payload = '''
if not self.cards then self.cards = {} end
if not self.children then self.children = {} end
'''
match_indent = true

# Why are you crashing.
[[patches]]
[patches.pattern]
target = '''cardarea.lua'''
pattern = '''function CardArea:update(dt)'''
position = 'after'
payload = '''
if not self.cards then self.cards = {} end
if not self.children then self.children = {} end
'''
match_indent = true

# Friends of Jimbo stuff
[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if add and not G.GAME.banned_keys[v.key] then '''
position = 'before'
payload = '''
G.GAME.payasaka_modded_rate = G.GAME.payasaka_modded_rate or 0
if not v.mod and G.GAME.payasaka_modded_rate > 0 and pseudorandom('modded') < G.GAME.payasaka_modded_rate then
	add = false
end
'''
match_indent = true

# Desperado
[[patches]]
[patches.pattern]
target = '''game.lua'''
pattern = '''for i = 1, #G.GAME.tags do
                                            G.GAME.tags[i]:apply_to_run({type = 'voucher_add'})
                                        end'''
position = 'before'
payload = '''
if next(SMODS.find_card('j_payasaka_desperado')) and not nosave_shop then
	G.GAME.current_round.used_packs = G.GAME.current_round.used_packs or {}
	local pack = "p_payasaka_risk_"
	local rng = pseudorandom(pseudoseed('payasaka_risk_desperado'..G.GAME.round_resets.ante), 1, 12)
	if rng < 4 then
		pack = pack.."normal_"..tostring(pseudorandom(pseudoseed('desperado_look'), 1, 2))
	elseif rng < 8 then
		pack = pack.."jumbo_1"
	else
		pack = pack.."mega_1"
	end
	G.GAME.current_round.used_packs[#G.GAME.current_round.used_packs+1] = pack
	local card = Card(G.shop_booster.T.x + G.shop_booster.T.w/2,
        G.shop_booster.T.y, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS[pack], {bypass_discovery_center = true, bypass_discovery_ui = true})
    card.cost = card.cost / 2
	create_shop_card_ui(card, 'Booster', G.shop_booster)
    card.ability.booster_pos = #G.shop_booster.cards
    card:start_materialize()
    G.shop_booster:emplace(card)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''draw_card(G.deck,G.hand, i*100/hand_space,'up', true)'''
position = 'after'
payload = '''
if G.GAME.payasaka_erratic_ultra then
	local suit = pseudorandom_element(G.GAME.payasaka_erratic_saved_suits, pseudoseed('erratic2')).key
	local rank = pseudorandom_element(G.GAME.payasaka_erratic_saved_ranks, pseudoseed('erratic2')).key
	local _ = SMODS.change_base(G.deck.cards[#G.deck.cards], suit, rank)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''game.lua'''
pattern = '''if G.GAME.chips - G.GAME.blind.chips >= 0 or G.GAME.current_round.hands_left < 1 then'''
position = 'before'
payload = '''
if (G.GAME.payasaka_scored_naneinfs or 0) >= 9 then
	G.STATE = G.STATES.NEW_ROUND
	G.STATE_COMPLETE = false
	if not Cryptid then
		ease_ante((-G.GAME.round_resets.ante))
	end
	return true
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''-- TARGET: main end_of_round evaluation'''
position = 'before'
payload = '''
if (G.GAME.payasaka_scored_naneinfs or 0) >= 9 then
	G.GAME.payasaka_scored_naneinfs = 0
	G.GAME.payasaka_defeated_perfectheart = true
	game_over = false
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''if G.GAME.chips - G.GAME.blind.chips >= 0 then
        add_round_eval_row({dollars = G.GAME.blind.dollars, name='blind1', pitch = pitch})'''
position = 'at'
payload = '''
local fuck = false
if G.GAME.chips - G.GAME.blind.chips >= 0 then
	fuck = true
end
if G.GAME.payasaka_defeated_perfectheart then
	fuck = true
	G.GAME.payasaka_defeated_perfectheart = nil
end
if fuck then
    add_round_eval_row({dollars = G.GAME.blind.dollars, name='blind1', pitch = pitch})
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''-- TARGET: main end_of_round evaluation'''
position = 'before'
payload = '''
if next(SMODS.find_card('j_payasaka_iroyokia')) and game_over then
	local c = SMODS.find_card('j_payasaka_iroyokia')[1]
	G.GAME.blind.in_blind = true
	card_eval_status_text(c, 'extra', nil, nil, nil, { message = "Nope!" })
	G.FUNCS.draw_from_discard_to_deck()
	G.STATE = G.STATES.DRAW_TO_HAND
	ease_hands_played(G.GAME.round_resets.hands - G.GAME.current_round.hands_left)
	ease_discard(G.GAME.round_resets.discards - G.GAME.current_round.discards_left)
	G.STATE_COMPLETE = false
	return true
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''{n=G.UIT.R, config={align = "cm", minh = 0.6}, nodes={
                {n=G.UIT.O, config={w=0.5,h=0.5, colour = G.C.BLUE, object = stake_sprite, hover = true, can_collide = false}},
                {n=G.UIT.B, config={h=0.1,w=0.1}},
                {n=G.UIT.T, config={text = number_format(blind_amt), scale = score_number_scale(0.9, blind_amt), colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.RED, shadow =  not disabled}}
              }},'''
position = 'before'
payload = '''
blind_choice.config.key == "bl_payasaka_showdown_sweet_sleep" and {n=G.UIT.R, config={align = "cm", minh = 0.6}, nodes={
   {n=G.UIT.O, config={w=0.5,h=0.5, colour = G.C.BLUE, object = stake_sprite, hover = true, can_collide = false}},
   {n=G.UIT.B, config={h=0.1,w=0.1}},
   {n=G.UIT.T, config={text = G.GAME.round_resets.ante == 39 and "TREE(3)" or number_format(blind_amt), scale = G.GAME.round_resets.ante == 39 and 0.8 or score_number_scale(0.9, number_format(blind_amt)), colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.RED, shadow =  not disabled}}
}} or 
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''{n=G.UIT.T, config={text = blind.mult..localize('k_x_base'), scale = 0.4, colour = G.C.RED}},'''
position = 'before'
payload = '''
blind.key == "bl_payasaka_showdown_sweet_sleep" and {n=G.UIT.T, config={text = "????", scale = 0.4, colour = G.C.RED}} or 
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = "for _, v in ipairs(SMODS.ConsumableType.ctype_buffer) do"
position = 'before'
payload = '''
if G.GAME.payasaka_deck_rate then
	table.insert(rates, { type = "Back", val = G.GAME.payasaka_deck_rate })
end
if G.GAME.payasaka_sleeve_rate then
	table.insert(rates, { type = "Sleeve", val = G.GAME.payasaka_sleeve_rate })
end
'''
match_indent = true

# Add hologram shader for mimic cards
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = '''self.children.center:draw_shader('dissolve')'''
position = 'at'
payload = '''
if self.ability.mimic_card or self.config.center_key == "m_payasaka_mimic" then
	--self.children.center:draw_shader('dissolve')
	if self.ARGS.send_to_shader then
		self.ARGS.send_to_shader[3] = 0
	end
	self.children.center:draw_shader('payasaka_hologram', nil, self.ARGS.send_to_shader)
	if self.ARGS.send_to_shader then
		self.ARGS.send_to_shader[3] = nil
	end
else
	self.children.center:draw_shader('dissolve')
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = '''if self.children.front and (self.ability.delayed or (self.ability.effect ~= 'Stone Card' and not self.config.center.replace_base_card)) then'''
position = 'at'
payload = '''
if self.children.front and (self.area and not self.area.config.collection) and (self.ability.delayed or self.ability.effect ~= 'Stone Card') and (self.ability.mimic_card or self.config.center_key == "m_payasaka_mimic") then
	--self.children.front:draw_shader('dissolve')
	if self.ARGS.send_to_shader then
		self.ARGS.send_to_shader[3] = self.ability.mimic_effect or 0
	end
	self.children.front:draw_shader('payasaka_hologram', nil, self.ARGS.send_to_shader)
	if self.ARGS.send_to_shader then
		self.ARGS.send_to_shader[3] = nil
	end
elseif self.children.front and (self.ability.delayed or (self.ability.effect ~= 'Stone Card' and not self.config.center.replace_base_card)) then
'''
match_indent = true

# Minor fixes for Huh! All 20s with Ten 10s
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''SMODS.calculate_effect(eff, eff.card); j = j+1; _, eff = next(reps[j]) '''
position = 'at'
payload = '''
SMODS.calculate_effect(eff, eff.card); j = j+1; _, eff = next(reps[j] or {}); eff = eff or {}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''local _, eff = next(reps[j])'''
position = 'at'
payload = '''
local _, eff = next(reps[j] or {})
if not eff then eff = {} end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.TIMERS.TOTAL = self.TIMERS.TOTAL + dt*(self.SPEEDFACTOR)'''
position = 'before'
payload = '''
if G.jokers then
	self.bakushin_multiplier = (2 ^ #SMODS.find_card('j_payasaka_bakushin'))
	self.SPEEDFACTOR = self.SPEEDFACTOR * self.bakushin_multiplier
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''--move and update all other moveables'''
position = 'before'
payload = '''
if G.jokers then
	self.real_dt = self.real_dt * (self.bakushin_multiplier or 1)
	self.TIMERS.REAL = self.TIMERS.REAL * (self.bakushin_multiplier or 1)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''local move_dt = math.min(1/20, self.real_dt)'''
position = 'before'
payload = '''
if G.jokers then
	self.real_dt = self.real_dt / (self.bakushin_multiplier or 1)
	self.TIMERS.REAL = self.TIMERS.REAL / (self.bakushin_multiplier or 1)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if not G.debug_UI_toggle then '''
position = 'before'
payload = '''
if G.jokers then
	self.real_dt = self.real_dt * (self.bakushin_multiplier or 1)
	self.TIMERS.REAL = self.TIMERS.REAL * (self.bakushin_multiplier or 1)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if self.achievement_notification then '''
position = 'before'
payload = '''
if G.jokers then
	self.real_dt = self.real_dt / (self.bakushin_multiplier or 1)
	self.TIMERS.REAL = self.TIMERS.REAL / (self.bakushin_multiplier or 1)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'engine/ui.lua'
pattern = "if next(self.children) == nil or self.config.no_fill then"
position = 'after'
payload = '''
if self.config.no_fill_width and next(self.children) then
	for k, w in pairs(self.children) do
        if w.set_wh then 
            local _cw, _ch = w:set_wh()
            if _cw and _ch then
                if _cw > _max_w then _max_w = _cw end
                if _ch > _max_h then _max_h = _ch end
            else
                _max_w = padding
                _max_h = padding
            end
        end
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''for k, v in pairs(other.ability) do'''
position = 'before'
payload = '''
PTASaka.remove_proxy(new_card)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''return new_card'''
position = 'before'
payload = '''
PTASaka.create_proxy(new_card)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''blind_choice.animation = AnimatedSprite(0,0, 1.4, 1.4, G.ANIMATION_ATLAS[blind_choice.config.atlas] or G.ANIMATION_ATLAS['blind_chips'],  blind_choice.config.pos)'''
position = 'after'
payload = '''
if blind_choice.config.key == "bl_payasaka_question" and G.GAME and G.GAME.round_resets and G.GAME.round_resets.last_cast_boss then
	blind_choice.animation:set_sprite_pos({ x = 0, y = 1 })
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''blind.lua'''
pattern = '''self.children.animatedSprite:set_sprite_pos(self.config.blind.pos)'''
position = 'after'
payload = '''
if self.pos and self.pos.edited then
	self.children.animatedSprite:set_sprite_pos(self.pos)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''game.lua'''
pattern = '''function Game:update_draw_to_hand(dt)'''
position = 'after'
payload = '''
if PTASaka.payasaka_temp_no_draw then G.STATE = G.STATES.ROUND_EVAL; G.STATE_COMPLETE = true; PTASaka.payasaka_temp_no_draw = nil; G.GAME.chips = 0; return end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if sticker.should_apply and type(sticker.should_apply) == 'function' and sticker:should_apply(card, center, area) then'''
position = 'before'
payload = '''
if sticker.sticker_tier then
	for _, s in pairs(SMODS.Sticker.obj_buffer) do
		if card.ability[s] and SMODS.Stickers[s].sticker_tier == sticker.sticker_tier then
			goto continue
		end
	end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''sticker:apply(card, true)
    end'''
position = 'after'
payload = '''
::continue::
'''
match_indent = true


[[patches]]
[patches.pattern]
target = '''engine/sprite.lua'''
pattern = '''love.graphics.scale(1/(other_obj.scale_mag or other_obj.VT.scale))'''
position = 'after'
payload = '''
if self.true_scale then
	love.graphics.scale(self.true_scale)
end
'''
match_indent = true
