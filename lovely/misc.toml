[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Add an exception for Snapgraph
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = "elseif card.ability.set == 'Joker' then "
position = 'before'
payload = '''
elseif card.config.center.pta_usable and card.from_area ~= G.shop and card.from_area ~= G.pack_cards then 
	draw_card(G.hand, G.play, 1, 'up', true, card, nil, mute)
	dont_dissolve = true
    delay(0.2)
    PTASaka.use_joker(card, area)
    SMODS.calculate_context({using_consumeable = true, consumeable = card, area = card.from_area})
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''(G.GAME.used_vouchers["v_directors_cut"] and not G.GAME.round_resets.boss_rerolled)) then'''
position = 'at'
payload = '''
(G.GAME.used_vouchers["v_directors_cut"] and not G.GAME.round_resets.boss_rerolled)) and not G.GAME.payasaka_cannot_reroll then
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''-- TARGET: setting_blind effects'''
position = 'before'
payload = '''
if G.GAME.risk_cards_risks and G.GAME.blind.boss then
	for _, v in ipairs(G.GAME.risk_cards_risks) do
		G.P_CENTERS[v.key].apply_risk(G.P_CENTERS[v.key], v.ability)
	end
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''-- TARGET: main end_of_round evaluation'''
position = 'before'
payload = '''
if G.GAME.risk_cards_risks and G.GAME.blind.boss and not game_over then
	for _, v in ipairs(G.GAME.risk_cards_risks) do
        print("jesus christ PLEASE give me the funny")
		G.P_CENTERS[v.key].apply_reward(G.P_CENTERS[v.key], v.ability)
	end
end
'''
match_indent = true
times = 1