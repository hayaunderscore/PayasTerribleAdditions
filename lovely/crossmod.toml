[manifest]
version = "1.0.0"
dump_lua = true
priority = 10

# Make Joyous Spring imitate Ash Blossom & Joyous Spring
# Only works IF JoyousSpring is present
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if next(SMODS.find_card("j_joy_yokai_ash")) and'''
position = 'at'
payload = '''
if next(SMODS.find_card("j_joy_yokai_ash")) or next(SMODS.find_card("j_payasaka_joyousspring")) and
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''for _, joker in ipairs(SMODS.find_card("j_joy_yokai_ash")) do'''
position = 'at'
payload = '''
local jokers = {}
for _, joker in ipairs(SMODS.find_card("j_joy_yokai_ash")) do
	jokers[#jokers+1] = joker
end
for _, joker in ipairs(SMODS.find_card("j_payasaka_joyousspring")) do
	jokers[#jokers+1] = joker
end
for _, joker in ipairs(jokers) do
'''
match_indent = true
times = 1

# The Cast's Finity joker will only appear if its natural
[[patches]]
[patches.pattern]
target = '''=[SMODS finity "Finity.lua"]'''
pattern = '''old_end_round()'''
position = 'after'
payload = '''
if G.GAME.blind.config.blind.key == 'bl_payasaka_question' and not G.GAME.payasaka_natural_cast then
	return
end
'''
match_indent = true
times = 1

# Uhh....
[[patches]]
[patches.pattern]
target = '''=[SMODS finity "Finity.lua"]'''
pattern = '''tag.config.display = FinisherBossBlindStringMap[G.GAME.blind.config.blind.key][2]'''
position = 'after'
payload = '''
if G.GAME.blind and G.GAME.blind.config.blind.key == 'bl_payasaka_question' and G.GAME.payasaka_hard_mode_cast and (Ortalab and PTASaka.Mod.config["Cross Mod Content"]) then
	tag.config.joker = FinisherBossBlindStringMap[G.GAME.blind.config.blind.key.."_hard"][1]
	tag.config.display = FinisherBossBlindStringMap[G.GAME.blind.config.blind.key.."_hard"][2]
end
'''
match_indent = true
times = 1

# Fix Cast with Obsidian Orb crashing the game
[[patches]]
[patches.pattern]
target = '''=[SMODS finity "Finity.lua"]'''
pattern = '''if G.jokers.cards[i] ~= card and G.jokers.cards[i].config.center.key ~= "j_finity_obsidianorb" then'''
position = 'at'
payload = '''
if G.jokers.cards[i] ~= card and G.jokers.cards[i].config.center.key ~= "j_finity_obsidianorb" and G.jokers.cards[i].sort_id ~= (card.ability.cast_id or -1) then
'''
match_indent = true
times = 1

# Also fix Vermillion Virus
[[patches]]
[patches.pattern]
target = '''=[SMODS finity "Finity.lua"]'''
pattern = '''if G.jokers.cards[i] == card then'''
position = 'at'
payload = '''
if G.jokers.cards[i] == card or G.jokers.cards[i].sort_id == (card.ability.cast_id or -1) then
'''
match_indent = true
times = 1

# Missing In Number
[[patches]]
[patches.pattern]
target = '''game.lua'''
pattern = '''local text = 'lq_' .. FinisherBossBlindQuips[G.GAME.blind.config.blind.key][1] .. '_' ..math.random(1,FinisherBossBlindQuips[G.GAME.blind.config.blind.key][2])'''
position = 'at'
payload = '''
local key = G.GAME.blind and G.GAME.blind.config.blind.key or ''
if G.GAME.blind and G.GAME.blind.config.blind.key == 'bl_payasaka_question' and G.GAME.payasaka_hard_mode_cast and (Ortalab and PTASaka.Mod.config["Cross Mod Content"]) then
	key = key.."_hard"
end
local text = 'lq_' .. FinisherBossBlindQuips[key][1] .. '_' ..math.random(1,FinisherBossBlindQuips[key][2])
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''card_character.lua'''
pattern = '''if G.GAME.blind and FinisherBossBlindQuips[G.GAME.blind.config.blind.key] and not G.GAME.won then
	self.children.card = Card(self.T.x, self.T.y, G.CARD_W, G.CARD_H, G.P_CARDS.empty, args.center or G.P_CENTERS[FinisherBossBlindStringMap[G.GAME.blind.config.blind.key][1]], {bypass_discovery_center = true})
else'''
position = 'at'
payload = '''
local key = G.GAME.blind and G.GAME.blind.config.blind.key or ''
if G.GAME.blind and G.GAME.blind.config.blind.key == 'bl_payasaka_question' and G.GAME.payasaka_hard_mode_cast and (Ortalab and PTASaka.Mod.config["Cross Mod Content"]) then
	key = key.."_hard"
end
if G.GAME.blind and G.GAME.blind and FinisherBossBlindQuips[key] and not G.GAME.won then
	self.children.card = Card(self.T.x, self.T.y, G.CARD_W, G.CARD_H, G.P_CARDS.empty, args.center or G.P_CENTERS[FinisherBossBlindStringMap[key][1]], {bypass_discovery_center = true})
else
'''
match_indent = true
times = 1

# Fix Entropy's own chip*mult operator crash
[[patches]]
[patches.pattern]
target = '''=[SMODS entr "lib/loader.lua"]'''
pattern = '''local operator = G.HUD:get_UIE_by_ID('chipmult_op')'''
position = 'after'
payload = '''
if PTASaka then
	local str = aoperator > 2 and
		string.format("{%d}", aoperator) or
		aoperator == -1 and "+" or aoperator <= 0 and "X" or ("^"):rep(aoperator)
	operator = PTASaka.recalc_chips_mult_shit(str, aoperator) or operator
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS entr "lib/loader.lua"]'''
pattern = '''operator.config.text = txt'''
position = 'at'
payload = '''
if not operator.config.object then
	operator.config.text = txt
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS entr "lib/loader.lua"]'''
pattern = '''operator.config.text_drawable:set(txt)'''
position = 'at'
payload = '''
if not operator.config.object then
	operator.config.text_drawable:set(txt)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS entr "lib/loader.lua"]'''
pattern = '''operator.config.scale = 0.8'''
position = 'at'
payload = '''
if not operator.config.object then
	operator.config.scale = 0.8
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS entr "lib/loader.lua"]'''
pattern = '''operator.config.colour = col'''
position = 'at'
payload = '''
if not operator.config.object then
	operator.config.colour = col
else
	operator.config.object.colours = { col }
end
'''
match_indent = true

# Fix Maximus Nuclear deck ante scaling
[[patches]]
[patches.pattern]
target = '''blind.lua'''
pattern = '''
if G.GAME.modifiers.mxms_nuclear_size then
    self.chips = self.chips^G.GAME.round_resets.ante
end
'''
position = 'at'
payload = '''
if (G.GAME.modifiers.mxms_nuclear_size or G.GAME.modifiers.mxms_paya_compat) then
    self.chips = self.chips^G.GAME.round_resets.ante
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
if G.GAME.modifiers.mxms_nuclear_size then
    blind_amt = blind_amt^G.GAME.round_resets.ante
end
'''
position = 'at'
payload = '''
if (G.GAME.modifiers.mxms_nuclear_size or G.GAME.modifiers.mxms_paya_compat) then
    blind_amt = blind_amt^G.GAME.round_resets.ante
end
'''
match_indent = true
times = 1

# Light Blue increases blind size
# As for why this isn't a calculate function.... Bunco tends to mess with that.
# I want this to work out of the box
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''-- TARGET: setting_blind effects'''
position = 'before'
payload = '''
for _, card in pairs(G.consumeables.cards) do
	if card.ability.set == "Colour" and card.ability.name == "col_Light_Blue" then
		G.E_MANAGER:add_event(Event{
			func = function()
				G.GAME.blind.chips = G.GAME.blind.chips * card.ability.blind_size_multiplier
				G.GAME.blind.chip_text = number_format(G.GAME.blind.chips)
				G.GAME.blind:wiggle()
				return true
			end
		})
		card_eval_status_text(card, 'extra', nil, nil, nil, { message = "Hardened!" })
	end
end

'''
match_indent = true