[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Multiplier effects
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = "mult = mod_mult(mult + amount)"
position = "before"
payload = '''
local marketpliers = SMODS.find_card("j_payasaka_markiplier_punch_gif")
local prob = G.GAME and G.GAME.probabilities.normal or 1
if G and G.GAME then
	for i = 1, #marketpliers do
		local m = marketpliers[i]
		if (pseudorandom("payasaka_multiplier_xmult") < prob/m.ability.extra.xmult_odds) or m.ability.cry_rigged then
			mult = mod_mult(mult * amount)
			key = 'xmult'
			update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})
			local fc = from_edition and scored_card or effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus
			card_eval_status_text(m, 'extra', nil, percent, nil,
				{ message = "Multiplied!", colour = G.C.DARK_EDITION, extrafunc = function() play_sound("payasaka_markiplier_ngahh", 1, 0.5); fc:juice_up() end })
			if not effect.remove_default_message then
				if from_edition then
					card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = localize{type='variable',key= to_big(amount) > to_big(0) and 'a_xmult' or 'a_xmult_minus',vars={amount}}, Xmult_mod =  amount, colour =  G.C.EDITION, edition = true})
				else
					if key ~= 'mult_mod' then
						if effect.mult_message then
							card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.mult_message)
						else
							card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'x_mult', amount, percent)
						end
					end
				end
			end
			return true
		end
	end
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = "hand_chips = mod_chips(hand_chips + amount)"
position = "before"
payload = '''
local marketpliers = SMODS.find_card("j_payasaka_markiplier_punch_gif")
local prob = G.GAME and G.GAME.probabilities.normal or 1
if G and G.GAME then
	for i = 1, #marketpliers do
		local m = marketpliers[i]
		if (pseudorandom("payasaka_multiplier_xchips") < prob/m.ability.extra.xchips_odds) or m.ability.cry_rigged then
			hand_chips = mod_chips(hand_chips * amount)
			key = 'xchips'
			update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})
			local fc = from_edition and scored_card or effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus
			card_eval_status_text(m, 'extra', nil, percent, nil,
				{ message = "Multiplied!", colour = G.C.DARK_EDITION, extrafunc = function() play_sound("payasaka_markiplier_ngahh", 1, 0.5); fc:juice_up() end })
			if not effect.remove_default_message then
				if from_edition then
					card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = localize{type='variable',key= to_big(amount) > to_big(0) and 'a_xchips' or 'a_xchips_minus',vars={amount}}, Xchips_mod =  amount, colour =  G.C.EDITION, edition = true})
				else
					if key ~= 'chip_mod' then
						if effect.chip_message then
							card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.chip_message)
						else
							card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'x_chips', amount, percent)
						end
					end
				end
			end
			return true
		end
	end
end
'''
match_indent = true
times = 1

# Oh you...
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local extrafunc = nil"
position = "after"
payload = '''
if extra and extra.extrafunc then extrafunc = extra.extrafunc end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if extrafunc then extrafunc() end"
position = "at"
payload = '''
if extrafunc then extrafunc(percent) end
'''
match_indent = true
