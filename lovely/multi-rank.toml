[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# From All-in-Jest!
# https://github.com/survovoaneend/All-In-Jest/wiki/Multi%E2%80%90rank-Implementation
[[patches]]
[patches.pattern]
target = "main.lua"
pattern = "if (love.system.getOS() == 'OS X' ) and (jit.arch == 'arm64' or jit.arch == 'arm') then jit.off() end"
position = "before"
match_indent = true
payload = '''
-- __NFS_READ_MULTI_RANK_PATCHED__
local function patch_text(txt)
    txt = txt:gsub(
        "([%w_.#]+):get_id%(%s*%)%s*%%%s*([%w_.%(%)#]+)%s*==%s*([%w_.%(%)#]+)",
        "ids_op(%1, \"mod\", %2, %3)"
    )

    for _, op in ipairs({">=", "<=", "~=", "==", ">", "<"}) do
        local esc = op:gsub("([%^%$%(%)%%%.%[%]%*%+%-%?])", "%%%1")

        txt = txt:gsub(
            "([%w_.#]+):get_id%(%s*%)%s*" .. esc .. "%s*([%w_.#]+):get_id%(%s*%)",
            "ids_op(%1, \"" .. op .. "\", %2:get_id())"
        )

        txt = txt:gsub(
            "([%w_.#]+):get_id%(%s*%)%s*" .. esc .. "%s*([%w_.#]+)",
            "ids_op(%1, \"" .. op .. "\", %2)"
        )
    end

    -- separate for brackets
    txt = txt:gsub(
        "([%w_.#]+%b[]):get_id%(%s*%)%s*%%%s*([%w_.%(%)]+)%s*==%s*([%w_.%(%)]+)",
        "ids_op(%1, \"mod\", %2, %3)"
    )

    for _, op in ipairs({">=", "<=", "~=", "==", ">", "<"}) do
        local esc = op:gsub("([%^%$%(%)%%%.%[%]%*%+%-%?])", "%%%1")

        txt = txt:gsub(
            "([%w_.#]+%b[]):get_id%(%s*%)%s*" .. esc .. "%s*([%w_.#]+%b[]):get_id%(%s*%)",
            "ids_op(%1, \"" .. op .. "\", %2:get_id())"
        )

        txt = txt:gsub(
            "([%w_.#]+%b[]):get_id%(%s*%)%s*" .. esc .. "%s*([%w_.%(%)]+)",
            "ids_op(%1, \"" .. op .. "\", %2)"
        )
    end

    return txt
end

local orig = package.searchers or package.loaders
table.insert(orig, 1, function(modname)
    local path = modname:gsub("%.", "/")..".lua"
    if path:lower():match("misc_functions%.lua") then
        return "\n\t[patched loader skipped: misc functions]"
    end
    if not love.filesystem.getInfo(path) then
        return "\n\t[patched loader skipped]"
    end
    local ok, txt = pcall(love.filesystem.read, path)
    if not ok or not txt then
        return "\n\t[patched loader skipped]"
    end
    local fixed, err = load(patch_text(txt), path)
    if not fixed then error(err) end
    return fixed
end)
'''

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/loader.lua"]'
pattern = "SMODS.Mods = {}"
position = "before"
payload = '''
-- __NFS_READ_MULTI_RANK_PATCHED__
local function patch_text(txt)
    txt = txt:gsub(
        "([%w_.#]+):get_id%(%s*%)%s*%%%s*([%w_.%(%)#]+)%s*==%s*([%w_.%(%)#]+)",
        "ids_op(%1, \"mod\", %2, %3)"
    )

    for _, op in ipairs({">=", "<=", "~=", "==", ">", "<"}) do
        local esc = op:gsub("([%^%$%(%)%%%.%[%]%*%+%-%?])", "%%%1")

        txt = txt:gsub(
            "([%w_.#]+):get_id%(%s*%)%s*" .. esc .. "%s*([%w_.#]+):get_id%(%s*%)",
            "ids_op(%1, \"" .. op .. "\", %2:get_id())"
        )

        txt = txt:gsub(
            "([%w_.#]+):get_id%(%s*%)%s*" .. esc .. "%s*([%w_.#]+)",
            "ids_op(%1, \"" .. op .. "\", %2)"
        )
    end

    -- separate for brackets
    txt = txt:gsub(
        "([%w_.#]+%b[]):get_id%(%s*%)%s*%%%s*([%w_.%(%)]+)%s*==%s*([%w_.%(%)]+)",
        "ids_op(%1, \"mod\", %2, %3)"
    )

    for _, op in ipairs({">=", "<=", "~=", "==", ">", "<"}) do
        local esc = op:gsub("([%^%$%(%)%%%.%[%]%*%+%-%?])", "%%%1")

        txt = txt:gsub(
            "([%w_.#]+%b[]):get_id%(%s*%)%s*" .. esc .. "%s*([%w_.#]+%b[]):get_id%(%s*%)",
            "ids_op(%1, \"" .. op .. "\", %2:get_id())"
        )

        txt = txt:gsub(
            "([%w_.#]+%b[]):get_id%(%s*%)%s*" .. esc .. "%s*([%w_.%(%)]+)",
            "ids_op(%1, \"" .. op .. "\", %2)"
        )
    end

    -- insert other_patch_text additions here

    return txt
end

local real_read = NFS.read
NFS.read = function(path)
    local content = real_read(path)
    if not content or not path:match("%.lua$") then return content end
    return patch_text(content)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/loader.lua"]'
pattern = "SMODS.get_optional_features()"
position = "after"
payload = '''
NFS.read = real_read
'''
match_indent = true 
