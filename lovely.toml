[manifest]
version = "1.0.0"
priority = 69

# Multiplier effects
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = "mult = mod_mult(mult + amount)"
position = "after"
payload = '''
local old_mult = mod_mult(mult - amount)
local prob = G.GAME and G.GAME.probabilities.normal or 1
if G and G.GAME and ((G.GAME.markiplier_prob_xmult_chance and G.GAME.markiplier_prob_xmult_odds and G.GAME.markiplier_prob_xmult_chance > 0 and G.GAME.markiplier_prob_xmult_odds > 0
	and pseudorandom("payasaka_multiplier_xmult") < G.GAME.markiplier_prob_xmult_odds*prob / G.GAME.markiplier_prob_xmult_chance) or G.GAME.markiplier_prob_rigged) then
	mult = mod_mult(old_mult * amount)
	--G.GAME.payasaka_markiplier_multiplied = true
	if next(SMODS.find_card("j_payasaka_markiplier_punch_gif")) then
		card_eval_status_text(pseudorandom_element(SMODS.find_card("j_payasaka_markiplier_punch_gif"), pseudoseed('payasaka_multiplier')), 'extra', nil, nil, nil,
			{ message = "Multiplied!", colour = G.C.DARK_EDITION, extrafunc = function() play_sound("payasaka_markiplier_ngahh", 1.0, 0.5) end })
	end
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = "hand_chips = mod_chips(hand_chips + amount)"
position = "after"
payload = '''
local old_chips = mod_chips(hand_chips - amount)
local prob = G.GAME and G.GAME.probabilities.normal or 1
if G and G.GAME and ((G.GAME.markiplier_prob_xchips_chance and G.GAME.markiplier_prob_xchips_odds and G.GAME.markiplier_prob_xchips_chance > 0 and G.GAME.markiplier_prob_xchips_odds > 0
	and pseudorandom("payasaka_multiplier_xchips") < G.GAME.markiplier_prob_xchips_odds*prob / G.GAME.markiplier_prob_xchips_chance) or G.GAME.markiplier_prob_rigged) then
	hand_chips = mod_chips(old_chips * amount)
	--G.GAME.payasaka_markiplier_multiplied = true
	if next(SMODS.find_card("j_payasaka_markiplier_punch_gif")) then
		card_eval_status_text(pseudorandom_element(SMODS.find_card("j_payasaka_markiplier_punch_gif"), pseudoseed('payasaka_multiplier')), 'extra', nil, nil, nil,
			{ message = "Multiplied!", colour = G.C.DARK_EDITION, extrafunc = function() play_sound("payasaka_markiplier_ngahh", 1.0, 0.5) end })
	end
end
'''
match_indent = true
times = 1

# Oh you...
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local extrafunc = nil"
position = "after"
payload = '''
if extra and extra.extrafunc then extrafunc = extra.extrafunc end
'''
match_indent = true
times = 1

# Shittim deck rerolling
# Hopefully no other mods override this...
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/game_object.lua"]'''
pattern = '{n=G.UIT.C,config={align = "tm", padding = 0.05, minw = 2.4}, nodes={}},'
position = "at"
payload = '''
{
	n = G.UIT.C,
	config = { align = "tm", padding = 0.05, minw = 2.4 },
	nodes = {
		{ n = G.UIT.R, config = { minh = 0.2 }, nodes = {} },
		{
			n = G.UIT.R,
			config = { align = "cm", minw = 1.8, minh = 1.2, r = 0.15, colour = G.C.GREY, button = 'reroll_booster', func = 'can_reroll_booster', hover = true, shadow = true },
			nodes = {
				{
					n = G.UIT.R,
					config = { align = "cm", padding = 0.07, focus_args = { button = 'c', orientation = 'cr' }, func = 'set_button_pip' },
					nodes = {
						{
							n = G.UIT.R,
							config = { align = "cm", maxw = 1.3 },
							nodes = {
								{ n = G.UIT.T, config = { text = localize('k_reroll'), scale = 0.4, colour = G.C.WHITE, shadow = true } },
							}
						},
						{
							n = G.UIT.R,
							config = { align = "cm", maxw = 1.3, minw = 0.6 },
							nodes = {
								{ n = G.UIT.T, config = { text = localize('$'), scale = 0.5, colour = G.C.WHITE, shadow = true } },
								{ n = G.UIT.T, config = { ref_table = booster_obj, ref_value = 'cost', scale = 0.55, colour = G.C.WHITE, shadow = true } },
							}
						}
					}
				}
			}
		},
	}
},
'''
match_indent = true
times = 1

# Comments
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = 'if center.unlock then'
position = 'before'
payload = '''
center.comment_parsed = {}
if center.comment then
	for _, line in ipairs(center.comment) do
		center.comment_parsed[#center.comment_parsed+1] = loc_parse_string(line)
	end
end
'''
match_indent = true
times = 1

# Use descriptions set if type is 'payasaka_comment'
# elseif args.type == 'descriptions' or args.type == 'unlocks' then 
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "elseif args.type == 'descriptions' or args.type == 'unlocks' then "
position = 'at'
payload = '''
elseif args.type == 'descriptions' or args.type == 'unlocks' or args.type == 'payasaka_comment' then 
'''
match_indent = true
times = 1

# Use comment_parsed if type is 'payasaka_comment'
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "for _, lines in ipairs(args.type == 'unlocks' and loc_target.unlock_parsed or args.type == 'name' and loc_target.name_parsed or (args.type == 'text' or args.type == 'tutorial' or args.type == 'quips') and loc_target or loc_target.text_parsed) do"
position = 'at'
payload = '''
for _, lines in ipairs(args.type == 'unlocks' and loc_target.unlock_parsed or args.type == 'name' and loc_target.name_parsed or (args.type == 'text' or args.type == 'tutorial' or args.type == 'quips') and loc_target or args.type == 'payasaka_comment' and loc_target.comment_parsed or loc_target.text_parsed) do
'''
match_indent = true
times = 1

# Render comment if available
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = "if AUT.badges.card_type or AUT.badges.force_rarity then"
position = 'before'
payload = '''
local comment_nodes, comment_main = {}, nil
if pcall(function() return G.localization.descriptions[card.ability.set][card.config.center.key].comment end) and G.localization.descriptions[card.ability.set][card.config.center.key].comment then
	localize { type = 'payasaka_comment', key = card.config.center.key, set = card.ability.set, nodes = comment_nodes }
	comment_main = desc_from_rows(comment_nodes)
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = "desc_from_rows(AUT.main),"
position = 'after'
payload = '''
comment_main and {n=G.UIT.R, config={align = "cm", colour = lighten(G.C.GREY, 0.15), r = 0.1}, nodes={
      {n=G.UIT.R, config={align = "tm", minh = 0.36, padding = 0.03}, nodes={{n=G.UIT.T, config={text = "Paya's comment:", scale = 0.32, colour = G.C.UI.TEXT_LIGHT}}}},
    }} or nil,
comment_main,
'''
match_indent = true
times = 1
